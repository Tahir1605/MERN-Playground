**************  CREATING FIRST SERVER  **************

Step 1 :-> Create a folder

Step 2 :-> Run Command in terminal 
-> npm init

Step 3 :-> Set "main":"server.js" or "index.js

Step 4 :-> Create server.js or index.js

Step 5 :-> Install express package (for creating server)
-> npm install express

Step 6 :-> install nodemon package 

(for keep running the server after changes or other 
word we can say that this keep track our backend code)

-> npm install nodemon

Step 7 :-> in package.json 
"type":"module"
"scripts":{
    "start":"npx nodemon server.js or index.js"
}

Step 8 :-> Create .gitignore and .env file and put 
node_modules and .env file in .gitignore file .

-> npm install dotenv

in server.js ->

import dotenv from 'dotenv'
dotenv.config()

Step 9 :-> Create First server

import express from 'express'
import dotenv from 'dotenv'
const port = process.env.PORT || 5000
dotenv.config()
const app = express()
app.get('/',(req,res) => {
    res.send("This is first server")
})
app.listen(port , () => {
    console.log(`Server running at http://localhost:${port}`);
    
})

then run comman -> npm start 


************** CREATING UNDERSTANDING VIEW ENGINE *********


Step 1 :-> install ejs
-> npm install ejs

Step 2 :-> Create public and views folder and we can create
html file in views folder and css and javascript in pubic folder

Step 3 :-> app.set("view engine" , "ejs");

Step 4 :-> app.use(express.static('public')); 

step 5 :-> app.get('/home',(req,res) => {
    res.render('home');
})



import express from 'express'
import dotenv from 'dotenv'
const port = process.env.PORT || 5000
dotenv.config()
const app = express()
app.set("view engine","ejs")
app.use(express.static('public'))
app.get("/",(req,res) => {
    res.send("This is my first server")
})
app.get("/home",(req,res) => {
    res.render('home')
})

app.listen(port,() => {
    console.log(`Server running at http://localhost:${port}`);   
})



************* DATABASE CONNECTION CRUD OPERATION ***********


Step 1:-> Create an file ex: form.ejs in views folder 
and make a form in form.ejs file

Step 2:-> Render This form.ejs file in server.js file
app.get("/form",(req,res) => {
    res.render('form')
})

Step 3:-> Create a folder called config in config folder 
create db.js or connection.js where we connect our server 
to DATABASE

To Write database connection and create model we have 
to install mongoose

-> npm install mongoose

import mongoose from "mongoose";

Type -> 1

const connection = async () => {
     try {

       await mongoose.connect(process.env.MONGODB_URL) 
       console.log("Database connected Successfully")
     } catch (err) {
        console.log("Database connection failed", err.message);
     }
}

export default connection

Type -> 2

import mongoose from "mongoose";

 const connection = () => {
  mongoose.connect(process.env.MONGODB_URL)
  .then(() => console.log("Database connected successfully"))
  .catch((err) => console.log("Database connection 
   failed",err.message))
 }

 export default connection

Step 4:-> Create a folder called model and in model folder 
we create models for inserting data 


import mongoose from "mongoose";

const userSchema = mongoose.Schema(
    {
        name:{
           type:String,
           required:true,
           trim:true,
        },
        email:{
           type:String,
           required:true,
           unique:true,
           trim:true,
        },
        dob:{
           type:Date,
           required:true,
        },
        password:{
           type:String,
           required:true,
           minlength:6,
        },
        image:{
           type:String,
           default:"",
        },
    },
    {timestamps : true}
)

const User = mongoose.model("User" , userSchema);
export default User


Step 5:-> attached model file and database connection 
file in server.js

import connection from './config/connection.js';
import User from './model/formModel.js'

connection()

Step 6:-> Write a code for data insert 

-> npm install multer (for uploading image file)

-> import multer from 'multer';
-> import path from 'path';
-> app.use(express.urlencoded({extended : true})) 
   (for form data)

-> ***** code for multer setup *****

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
      cb(null, "public/uploads/")  
      // save inside public/uploads
    },
    filename: (req, file, cb) => {
      cb(null, Date.now() + path.extname(file.originalname)) 
      // unique filename
    }
})
const upload = multer({ storage: storage })

-> ***** handle form submission *****

app.post("/form", upload.single("image"), async (req, res) => {

    try {
        const { name, email, dob, password } = req.body
        const image = req.file ? `/uploads/${req.file.filename}` 
        : ""  // save relative path

        const newUser = new User({
            name,
            email,
            dob,
            password,
            image
        })

        await newUser.save()
        res.json({ 
            success: true, 
            message: "User created successfully",
         })

    } catch (error) {
        console.log(error)
        res.json({ 
            success: false, 
            message: error.message || 
            "Internal server error"
         })
    }
})


-> add in html form 

action="/form" method="post" enctype="multipart/form-data"


-> Now time for validation and check user already exist or not

-> npm install express-validator

in server js import validationResult and body

-> import { validationResult , body } from 'express-validator'

******** code for field validation *******

[

    body('name')
    .trim()
    .notEmpty().withMessage("Please enter name")
    .isLength({min:3}).withMessage("Name length must be 3")
    .isAlpha('en-US',{ignore:' '}).withMessage("Enter a valid name"),

    body('email')
    .trim()
    .notEmpty().withMessage("Please enter email")
    .isEmail().withMessage("Enter a valid email"),

    body('dob')
    .notEmpty().withMessage("Please enter date of birth")
    .isDate().withMessage('Enter valid date'),

    body('password')
    .trim()
    .isLength({ min: 6 }).withMessage("Password must be at least 6 characters long")
    .matches(/[A-Z]/).withMessage("Password must contain at least one uppercase letter")
    .matches(/[a-z]/).withMessage("Password must contain at least one lowercase letter")
    .matches(/[0-9]/).withMessage("Password must contain at least one number")
    .matches(/[^A-Za-z0-9]/).withMessage("Password must contain at least one special character"),

],


******** code for checking error validation ********


const errors = validationResult(req);
     // console.log(errors.array()); 
     this send the whole error array
     const errorMessage = errors.array().map(err => err.msg)
     // console.log(errorMessage);
        
     if (!errors.isEmpty()) {
        // console.log(req.body); 
        // it prints the data that user sent in form
        return res.json(
            {
             errors: errorMessage,
             message: 'Invalid data',
            }
        );
     }


******* code for checking if already user exists or not ****

const exists = await User.findOne({ email });
    if (exists) {
        return res.json({ 
            success:false, 
            message: 'User already exists' });
    }




******** fully structured code for adding data ********


app.post("/form", 

     upload.single("image"),

[
    body('name')
    .trim()
    .notEmpty().withMessage("Please enter name")
    .isLength({min:3}).withMessage("Name length must be 3")
    .isAlpha('en-US',{ignore:' '}).withMessage("Enter a valid name"),

    body('email')
    .trim()
    .notEmpty().withMessage("Please enter email")
    .isEmail().withMessage("Enter a valid email"),

    body('dob')
    .notEmpty().withMessage("Please enter date of birth")
    .isDate().withMessage('Enter valid date'),

    body('password')
    .trim()
    .isLength({ min: 6 }).withMessage("Password must be at least 6 characters long")
    .matches(/[A-Z]/).withMessage("Password must contain at least one uppercase letter")
    .matches(/[a-z]/).withMessage("Password must contain at least one lowercase letter")
    .matches(/[0-9]/).withMessage("Password must contain at least one number")
    .matches(/[^A-Za-z0-9]/).withMessage("Password must contain at least one special character"),

],

async (req, res) => {

    try {

        const errors = validationResult(req);
        // console.log(errors.array()); this send the whole error array
        const errorMessage = errors.array().map(err => err.msg)
        // console.log(errorMessage);
        
        if (!errors.isEmpty()) {
            // console.log(req.body); 
            // it prints the data that user sent in form
            return res.json(
                {
                    errors: errorMessage,
                    message: 'Invalid data',
                }
            );
        }

        const { name, email, dob, password } = req.body

        const exists = await User.findOne({ email });
        if (exists) {
            return res.json({ 
                success:false, 
                message: 'User already exists' });
        }

        const hashedPassword = await bcrypt.hash(password, 10);
        const image = req.file ? `/uploads/${req.file.filename}` 
        : ""  // save relative path

        const newUser = new User({
            name,
            email,
            dob,
            password:hashedPassword,
            image
        })

        await newUser.save()

        res.json({ 
            success: true, 
            message: "User created successfully",
         })

    } catch (error) {
        console.log(error)
        res.json({ 
           success: false, 
           message: error.message || "Internal server error",
        })
    }
})



********* code for fetching data from database ********

app.get("/users", async (req, res) => {
  try {
    const users = await User.find(); 
    res.json({
      success: true,
      data: users
    });
  } catch (error) {
    res.json({
      success: false,
      message: error.message || "Internal server error"
    });
  }
});


******** code for deleting data from database ********


app.delete("/users/delete/:id", async (req, res) => {
  try {
    const { id } = req.params;

    const deletedUser = await User.findByIdAndDelete(id);

    if (!deletedUser) {
      return res.json({
        success: false,
        message: "User not found",
      });
    }

    res.json({
      success: true,
      message: "User deleted successfully",
    });
  } catch (error) {
    res.json({
      success: false,
      message: error.message || "Internal server error",
    });
  }
});


********* update data from database *********


app.put("/users/update/:id", upload.single("image"),

 async (req, res) => {

  try {
    
    const { id } = req.params;
    const { name, email, dob, password } = req.body;

    // find the user
    const user = await User.findById(id);
    if (!user) {
      return res.json({
        success: false,
        message: "User not found",
      });
    }

    // update fields if provided
    if (name) user.name = name;
    if (email) user.email = email;
    if (dob) user.dob = dob;

    // update password if provided
    if (password) {
      const hashedPassword = await bcrypt.hash(password, 10);
      user.password = hashedPassword;
    }

    // update image if new file uploaded
    if (req.file) {
      user.image = `/uploads/${req.file.filename}`;
    }

    await user.save();

    res.json({
      success: true,
      message: "User updated successfully",
      data: user,
    });
  } catch (error) {
    res.json({
      success: false,
      message: error.message || "Internal server error",
    });
  }
});


********* How to test api in postman *******

Step 1 :-> set the request type get , post , put , delete , 
patch , head , options

and then set the path ex:- http://localhost:3000/users

if want to send form data ->

body -> form-data -> set key and values -> send

if want to update data or send normal data not form data

body -> raw -> JSON -> send

and send data in json format 

ex :-> 

{
   "name"  : "Tahirul islam",
   "email" : "5566tahirul@gmail.com"
}


********** Upload image file in Imagekit *******

Step 1:-> imagekit setup

in config -> imagekit.js

import ImageKit from "imagekit";
import dotenv from 'dotenv'
dotenv.config()

var imagekit = new ImageKit({
    publicKey : process.env.IMAGEKIT_PUBLIC_KEY,
    privateKey : process.env.IMAGEKIT_PRIVET_KEY,
    urlEndpoint : process.env.IMAGEKIT_URL_ENDPOINT
});

export default imagekit;

Step 2:-> 

import fs from 'fs'
import imagekit from '../config/imageKit.js';

        //upload image to imagekit

 const fileBuffer = fs.readFileSync(imageFile.path)
 
        const response = await imagekit.upload({
            file: fileBuffer,
            fileName: imageFile.originalname,
            folder: "/uploads"
        })

       // here imageFile is getting from req.file;
       // optimize through imagekit URL transformation

        const optimizeImageUrl = imagekit.url({
            path: response.filePath,
            transformation: [
                { quality: 'auto' },  //Auto compression
                { format: 'webp' },   // Convert to modern format
                { width: '1280' }     // width resizing
            ]
        });

        const image = optimizeImageUrl;


  Step 3:->

********* multer setup ********

import multer from "multer";
const upload = multer({storage:multer.diskStorage({})})
export default upload;

Step 4:-> 

upload.single('image')

send this as middleware in url


********* update data and image file in imagekit ******

const updateClient = async (req, res) => {
    try {

        const { id } = req.params;
        const { name, email, password } = req.body;

        const updateClient = await Client.findById(id);
        if (!updateClient) {
            return res.json({
                success: false,
                message: "Client not found"
            })
        }

        if (name) updateClient.name = name
        if (email) updateClient.email = email
        if (password) {
            const hashPassword = await bcrypt.hash(password, 10)
            updateClient.password = hashPassword
        }

        if (req.file) {

            //update image to imagekit

            const fileBuffer = fs.readFileSync(imageFile.path)
            const response = await imagekit.upload({
                file: fileBuffer,
                fileName: imageFile.originalname,
                folder: "/uploads"
            })

            // optimize through imagekit URL transformation

            const optimizeImageUrl = imagekit.url({
                path: response.filePath,
                transformation: [
                    { quality: 'auto' },  //Auto compression
                    { format: 'webp' },   // Convert to modern format
                    { width: '1280' }     // width resizing
                ]
            });

            updateClient.image = optimizeImageUrl;

        }

        await updateClient.save()

        res.json({
            success: true,
            message: "Client updated successfully",
            updatedData: updateClient
        })


    } catch (error) {
        res.json({
            success: false,
            message: error.message || "Internal Server error"
        })
    }
}


******* How to insert multiple images ******

Step 1:-> same multer setup as one image upload
Step 2:-> same imageKit setup as one image upload

Step 3:-> 

const imageFiles = req.files; // because we’re using upload.array()

        if (!imageFiles || imageFiles.length === 0) {
            return res.json({
                success: false,
                message: "No files uploaded",
            });
        }

        const uploadPromises = imageFiles.map(file => {
            const fileBuffer = fs.readFileSync(file.path);

            return imagekit.upload({
                file: fileBuffer,
                fileName: file.originalname,
                folder: "/empImages",
            });
        });

        const results = await Promise.all(uploadPromises);

        // ✅ Optimize ImageKit URLs

        const optimizedUrls = results.map(r =>
            imagekit.url({
                path: r.filePath,
                transformation: [
                    { quality: "auto" },  // Auto compression
                    { format: "webp" },   // Convert to WebP
                    { width: "1280" },    // Resize
                ],
            })
        );

        const newEmp = new Emp({
          images:optimizedUrls
        })

Step 4:-> in router we have to use upload.array("images",5)
//if i want to upload maximum 5 images 